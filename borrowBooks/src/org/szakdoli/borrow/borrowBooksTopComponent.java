/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/NetBeansModuleDevelopment-files/templateTopComponent637.java to edit this template
 */
package org.szakdoli.borrow;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.mail.MessagingException;
import javax.swing.DefaultComboBoxModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.szakdoli.konnekcio.sqlkonnekcio;
import org.szakdoli.mail.sendmail;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.szakdoli.borrow//borrowBooks//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "borrowBooksTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.szakdoli.borrow.borrowBooksTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_borrowBooksAction",
        preferredID = "borrowBooksTopComponent"
)
@Messages({
    "CTL_borrowBooksAction=borrowBooks",
    "CTL_borrowBooksTopComponent=borrowBooks Window",
    "HINT_borrowBooksTopComponent=This is a borrowBooks window"
})
public final class borrowBooksTopComponent extends TopComponent {

    public borrowBooksTopComponent() {
        initComponents();
        setName(Bundle.CTL_borrowBooksTopComponent());
        setToolTipText(Bundle.HINT_borrowBooksTopComponent());
            jcKonyv.setModel(mod1);
        jComboBox3.setModel(mod2);
        jCNev.setModel(mod3);
        updateCB2();
        updateCB();
    
        
    }
    Connection conn;
    DefaultComboBoxModel mod1 = new DefaultComboBoxModel();
    DefaultComboBoxModel mod2 = new DefaultComboBoxModel();
    DefaultComboBoxModel mod3 = new DefaultComboBoxModel();
    
    
    public void updateCB(){
        try {
            sqlkonnekcio dbc = new sqlkonnekcio();
            conn = dbc.connect();
            String sqlQ = "SELECT cim from konyvek where isKolcsonozve<konyvszam";
            PreparedStatement pst = conn.prepareStatement(sqlQ);
            ResultSet rs = pst.executeQuery();
            
            if (mod1.getSize()>0) {
                
                    mod1.removeAllElements();
                
            }
            while (rs.next()){
                mod1.addElement(rs.getString("cim"));
            }
            pst.close();
            conn.close();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
            
   }
      public void updateCB2(){
        try {
            sqlkonnekcio dbc = new sqlkonnekcio();
            conn = dbc.connect();
            String sqlQ = "SELECT nev from members";
            PreparedStatement pst = conn.prepareStatement(sqlQ);
            ResultSet rs = pst.executeQuery();
            
             if (mod3.getSize()>0) {
                
                    mod3.removeAllElements();
                
            }
             mod3.addElement("<Válassz ki egy tagot>");
            while (rs.next()){
                mod3.addElement(rs.getString("nev"));
            }
             pst.close();
        conn.close();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
       
            
   }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCNev = new javax.swing.JComboBox<>();
        jcKonyv = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(300, 400));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCNev.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jCNev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCNevActionPerformed(evt);
            }
        });
        jPanel1.add(jCNev, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 380, 40));

        jcKonyv.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jPanel1.add(jcKonyv, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 380, 40));

        jComboBox3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jPanel1.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 380, 40));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(borrowBooksTopComponent.class, "borrowBooksTopComponent.jLabel1.text")); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jButton1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(borrowBooksTopComponent.class, "borrowBooksTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 430, 270, 80));

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(borrowBooksTopComponent.class, "borrowBooksTopComponent.jLabel2.text")); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(borrowBooksTopComponent.class, "borrowBooksTopComponent.jLabel3.text")); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/szakdoli/borrow/frissítl.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(borrowBooksTopComponent.class, "borrowBooksTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 40, 40));

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
try{
    
        sqlkonnekcio dbc = new sqlkonnekcio();
            conn = dbc.connect();
             String sqlS ="INSERT INTO kolcsonzes(idkolcsonzes,konyvid,nev,telszam,vissza,email) values (?,?,?,?,?,?) ";
             String sqlC ="SELECT max(idkolcsonzes) from kolcsonzes";
             String sql3 = "Select idkonyvek from konyvek where cim =?";
             String sqlK = "select isKolcsonozve,konyvszam from konyvek where idkonyvek =?";
             String sql4 = "update konyvek set isKolcsonozve=? where idkonyvek=?";
             String sqlI = "select igazolvany from members where nev =? ";
             String sqlMail = "select mail from members where igazolvany =?";
             PreparedStatement pstC = conn.prepareStatement(sqlC);
             PreparedStatement pst = conn.prepareStatement(sqlS);
             PreparedStatement pst3 = conn.prepareStatement(sql3);
             PreparedStatement pst4 = conn.prepareStatement(sql4);
             PreparedStatement pstK = conn.prepareStatement(sqlK);
              PreparedStatement pstI = conn.prepareStatement(sqlI);
                PreparedStatement pstM = conn.prepareStatement(sqlMail);
             String jcSelected = jCNev.getSelectedItem().toString();
             String jcSelected2 = jcKonyv.getSelectedItem().toString();
             pst3.setString(1, jcSelected2);
             pstI.setString(1,jcSelected);
             
             ResultSet rsC = pstC.executeQuery();
             
             ResultSet rs3 = pst3.executeQuery();
             ResultSet rsI = pstI.executeQuery();
            
             
             int kolcsonid = 0;
             int konyvid =0;
             int kolcsszam = 0;
             int konyvszam =0;
             String igazolv = "";
             
            if (rsI.next()) {
                igazolv = rsI.getString(1);
    }
            pstM.setString(1, igazolv);
            ResultSet rsM = pstM.executeQuery();
            String hova = "";
            if (rsM.next()) {
            hova = rsM.getString(1);
    }
         
             if(rsC.next()&&rs3.next()){
                kolcsonid = rsC.getInt(1);
                konyvid = rs3.getInt(1);
                
             }
             pstK.setInt(1, konyvid);
             ResultSet rsk = pstK.executeQuery();
             
             if (rsk.next()) {
              kolcsszam = rsk.getInt(1);
              konyvszam = rsk.getInt(2);
          }
             String nev = jCNev.getSelectedItem().toString();
             String konyv = jcKonyv.getSelectedItem().toString();
             
             //határidő
                   Date date = new Date();
                      	SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
                        formatter.format(date);
            Calendar c = Calendar.getInstance();
            c.setTime(date);
            c.add(Calendar.DATE, 30);
            Date visszahoz = c.getTime();
            formatter.format(visszahoz);
            
            
            
            pst.setInt(1,kolcsonid+1 );
            pst.setInt(2,konyvid );
            pst.setString(3, nev);
            pst.setString(4, igazolv);
            pst.setString(5, formatter.format(visszahoz));
            pst.setString(6, hova);
            pst.execute();
            pst4.setInt(1, kolcsszam+1);
            pst4.setInt(2, konyvid);
            pst4.execute();
             
             
            sendmail.mailborrowed(hova, nev, konyv);
             
            pstM.close();
             pst.close();
             pstC.close();
             pst3.close();
             pst4.close();
             conn.close();
             updateCB();
             updateCB2();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (MessagingException ex) {
            Exceptions.printStackTrace(ex);
        } 
    }//GEN-LAST:event_jButton1ActionPerformed

    void getID () {
           try {
           sqlkonnekcio dbc = new sqlkonnekcio();
            conn = dbc.connect();
            String sqlQ = "SELECT igazolvany from members where nev=?";
            PreparedStatement pst = conn.prepareStatement(sqlQ);
             if (jCNev.getSelectedItem()==null) {
                    mod2.addElement("<válassz egy tagot>");
                }else{
                 pst.setString(1, jCNev.getSelectedItem().toString());
            ResultSet rs = pst.executeQuery();
            
            if (mod2.getSize()>0) {
                
                    mod2.removeAllElements();
                
            }
            
            while (rs.next()){
               
                mod2.addElement(rs.getString("igazolvany"));
            }
                 
             }
            
            
            conn.close();
            pst.close();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    private void jCNevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCNevActionPerformed
      
     getID();
       
     
    }//GEN-LAST:event_jCNevActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       updateCB();
       updateCB2();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jCNev;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> jcKonyv;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
